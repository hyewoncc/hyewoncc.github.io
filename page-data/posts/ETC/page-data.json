{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/ETC","result":{"pageContext":{"currentCategory":"ETC","categories":["All","Spring","트러블슈팅","JPA","kotlin","회고","우아한테크코스","ETC","CS","Java","독서"],"edges":[{"node":{"id":"75ab6283-c820-5191-ac78-8ff6b58e19f0","excerpt":"슬랙이 봇을 강퇴시켰어요 서버에서 슬랙 API를 호출하려면 발급받은 봇 토큰이 필요하다. 해당 정보를 기밀이라고 생각하지 않았는데… 애초에 봇에게 호출할 수 있는 API 제한이 있다 연결된 워크스페이스가 개발을 위해 생성된 줍줍 팀 워크스페이스다 라는 이유에서였다.  그래서 깃헙에 을 포함한 을 올려놨는데… 어느날 API 응답이 오지 않았다. 개발자 도구의 응답에는 이라는 에러 문구가 떴고, 분명 워크스페이스에 정상 추가했던 봇이 사라져 있었다.  슬랙이 봇을 강제 추방시킨 것이었다… 얼마간 잘 썼기에, 일정 주기로 공개 저장소들을 크롤링 해 한번에 정지시키는 게 아닐까 싶다. 설명서를 잘 읽자 슬랙 API에 들어가면 가 떡하니 명시되어 있다.  봇 토큰에는 큰 권한이 있습니다. 토큰은 사용자가 앱을 설치함으로써 권한을 부여했음을 나타냅니다. 앱을 설치한 유저가 준 신뢰를 해치지 않도록 토큰을 안전하게, 기밀로 보관하세요. 최소한 공개적인 형상관리에 토큰을 올리지 마세요. 환경 변…","fields":{"slug":"/git-submodule/"},"frontmatter":{"categories":"ETC 트러블슈팅","title":"[git] 슬랙한테 봇 강퇴당하고 서브모듈 도입한 이야기","date":"July 25, 2022"}},"next":{"fields":{"slug":"/session-cookie-jwt/"}},"previous":{"fields":{"slug":"/wild-seed/"}}},{"node":{"id":"daccaece-c833-5d4f-b63f-7213dd06dafe","excerpt":"지금까지 DB를 사용하는 미션에서 컬럼 수가 적기에  문을 자주 썼다. 그런데 로 모든 컬럼을 가져오는 것 보다 컬럼을 명시해 가져오는 게 낫다는 영문 포스팅을 제이슨이 공유해주셔서 읽었다. 7 Reasons Why Using SELECT * FROM TABLE in SQL Query Is a Bad Idea 다음은 해당 포스팅을 전체 번역한 것이다. SELECT * FROM TABLE 쿼리문을 쓰는 게 좋지 않은 7가지 이유 인터넷에서  쿼리문을 쓰는 게 나쁘니 피하라고 하는 많은 글을 봐왔다. 그 대신 정확한 컬럼을 나열해야 한다. 이는 내가 주니어 개발자에게 가르치기도 하는 좋은 제안이자 좋은 SQL 작성 습관 중 하나인데, 많은 사람들이 그 이유는 설명하지 않는다. 왜 쿼리문에서 을 쓰면 안되는지 이유를 설명하지 않고 SQL 개발자들을 설득하기란 어려운데, 대개 Oracle database에서 를 실행하는 것으로 SQL 학습을 시작하기 때문이다. 이 글에서 왜  쿼리문을 쓰…","fields":{"slug":"/sql-no-wildcard/"},"frontmatter":{"categories":"ETC","title":"[SQL] SELECT * 쓰지 말자","date":"May 25, 2022"}},"next":{"fields":{"slug":"/optional-and-method-naming/"}},"previous":{"fields":{"slug":"/test-annotations/"}}},{"node":{"id":"9859d6a7-4118-54f9-aac5-8737d88c21ef","excerpt":"웹 체스 미션을 진행하면서 을 이용해 DB에 접근하는 모든 클래스의 이름을 라 지었다가 아래와 같은 코멘트를 받았다.   코멘트를 받기 전까지 와 가 이름만 다른 같은 개념이라 생각했다. 그래서 이 둘의 차이에 대해 알아보았다. @Repository 문서 스프링  어노테이션 자바 문서에는 다음과 같이 적혀 있다.   적용 된 클래스가 Repository 임을 나타냅니다. 이는 도메인 주도 설계(에릭 에반스)에서 정의한 저장소를 캡슐화하고, 저장하고, 검색하여 객체의 컬렉션처럼 다루는 메커니즘을 뜻합니다. Data Access Object와 같은 전통적인 자바 EE 패턴을 사용하는 팀도 이 스테레오타입을 DAO 클래스에 적용할 수 있습니다. 다만 그 전에 Data Access Object와 DDD-style repositories의 차이를 이해하는 것이 좋습니다. 이 어노테이션은 다목적 스테레오타입이고 개별 팀은 자신들만의 축소된 의미에 맞춰 적절하게 사용하면 됩니다. 어노테이트된 …","fields":{"slug":"/dao-and-repository/"},"frontmatter":{"categories":"ETC","title":"DAO 와 Repository","date":"May 07, 2022"}},"next":{"fields":{"slug":"/left-join-inner-join/"}},"previous":{"fields":{"slug":"/7sql-study/"}}},{"node":{"id":"17ad5af7-72e6-5ac7-b502-5f6e124319a7","excerpt":"left join / (inner) join 7SQL 스터디를 하다 자신만만하게 풀었는데 기대한 답이 나오지 않는 문제가 있었다. 주문을 한 번도 하지 않은 모든 고객을 찾아주세요. 스터디는 w3schools의 sql 실습 페이지를 이용했는데, 고객의 정보가 있는  테이블과  테이블이 있다. 주문이 없는 고객을 찾기 위해  테이블에  테이블을 한 다음, 에 이 있는 걸 확인하려 했다. 그런데 실행 결과를 보니 가 없는  고객은 아예 결과에 잡히지 않았다.  아직 sql 문법에 익숙하지 않아서  키워드를 차례로 앞에 붙여봤는데, 일 때만 가 인 경우도 포함되어 나왔다.  찾아보니 은 , 을 포함한 은 을 나타낸다 한다.  를 하면, A 테이블의 모든 행을 조회하면서 B에 없는 값은 로 처리된다. 나머지 은 해당 사이트에서 지원하지 않아 써보진 못했지만, 스터디 덕분에 차이를 확실히 알게 되었다. left join / (inner) join","fields":{"slug":"/left-join-inner-join/"},"frontmatter":{"categories":"ETC","title":"[SQL] left join vs (inner) join","date":"April 30, 2022"}},"next":{"fields":{"slug":"/level1-interview/"}},"previous":{"fields":{"slug":"/dao-and-repository/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}