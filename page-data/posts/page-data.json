{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"62337bb9-e2bd-5296-b033-b01c2f3d8bfc","excerpt":"🛠 메시지 조회 테스트 개선기 초난감 메시지 조회 줍줍은 슬랙 메시지를 날짜이동, 윗방향 스크롤, 아래방향 스크롤, 단어검색, 특정 채널만 보기 등 여러 조건으로 조회할 수 있다.\n사용자 편의를 위해 이렇게 다양한 조회 조건을 지원하다 보니 동적 쿼리 생성이 필요해 도 도입했다.  작성된  조회 코드와 테스트 작성을 위해 파악된 케이스만 봐도 복잡도가 짐작 갈 것이다. 어떤 점을 개선하고 싶었나 해당 메시지 조회 기능 개발은 다른 팀원들이 맡았다.\n그래서 올라온 PR을 봤는데, 동작은 잘 했으나 코드 개발에 참여하지 않은 입장에서 테스트가 알아보기 어려웠다. 처음 테스트를 읽었을 때 왜 읽기 어렵다고 느껴졌을까?\n먼저 데이터가 문으로 들어가는 게 원인 중 하나였다. 메시지 조회를 하려면 미리 저장된 1.멤버(사용자) 2.채널 3.채널 구독 데이터가 필수로 필요했다.\n기본적으로 메시지에  의존관계가 있고, 조회 시 구독하는 채널 메시지만 필터링 하는 분기가 기본으로 있었기 때문이다.…","fields":{"slug":"/journey-to-cool-test-1/"},"frontmatter":{"categories":"Spring 트러블슈팅","title":"메시지 조회 테스트 개선기","date":"September 28, 2022"}},"next":{"fields":{"slug":"/topring-chapter2/"}},"previous":null},{"node":{"id":"c819eafd-4b3a-5670-a6fd-a46e61f069ab","excerpt":"해당 포스팅은 토비의 스프링 3.1을 읽고 책 내용과 실습 코드 정리 및 스터디에서 나온 의견을 정리한 포스팅이다. 2장 테스트 스프링을 국비학원에서 처음 배운 나는 가 존재하는 줄도 몰랐다.\n자잘한 코드 하나 고치는 데도 대소동이 일어났다.\n회원가입 기능을 만드는데 비밀번호 제한이 잘 안되는 것 같다면 애플리케이션을 종료한다 코드를 수정하고 break point를 걸거나 출력문을 써둔다 다시 애플리케이션을 킨다 크롬 시크릿 + 강력 새로고침으로 페이지에 들어간다 회원가입을 시도하고 다시 확인한다 이런 과정을 거쳐야 했다. 테스트가 일상이 된 지금은 테스트가 없으면 불안하다. (레벨4 미션을 하면서 소홀해지긴 했지만…)\n테스트를 배운 처음엔 신기했고, 그 다음엔 조금 귀찮았는데, 지금은 테스트가 없으면 줄 없이 번지점프하는 기분이 든다.\n테스트는 나에게 자유롭고 재밌게 코드를 갖고 놀게 해주는 안전장치인 셈이다.  초난감 UserDaoTest 개선기 1장에서 만들었던 는 내가 예전…","fields":{"slug":"/topring-chapter2/"},"frontmatter":{"categories":"Spring","title":"✨🌈💫테스트💫🌈✨ (토비의 스프링)","date":"September 18, 2022"}},"next":{"fields":{"slug":"/topring-chapter1/"}},"previous":{"fields":{"slug":"/journey-to-cool-test-1/"}}},{"node":{"id":"4c8d6837-84c0-5d44-bc31-a7d68bc3edf6","excerpt":"해당 포스팅은 토비의 스프링 3.1을 읽고 책 내용과 실습 코드 정리 및 스터디에서 나온 의견을 정리한 포스팅이다. 1장 오브젝트와 의존관계 늘 만 생각했기에, 1장 서두의 가 중점인 스프링의 핵심 철학이 인상깊었다.\n그래서 포스팅을 인용으로 시작한다. 자바 엔터프라이즈 기술의 혼란 속에서 잃어버렸던 객체지향 기술의 진정한 가치를 회복시키고, 그로부터 객체지향 프로그래밍이 제공하는 폭넓은 혜택을 누릴 수 있도록 기본으로 돌아가자는 것이 바로 스프링의 핵심 철학이다. 그래서 스프링이 가장 관심을 많이 두는 대상은 오브젝트다. p.53 초난감 DAO 개선기 JDBC API를 처음 배우며 만들었던 모습의  클래스를 만들었다.\n제일 기본적인 기능으로 User 정보를 단건 저장하는 , 단건 조회하는 이 있다. 비록 동작은 잘 하지만 썩 잘 짠 코드 같진 않다.\n어느 부분이 문제일까?\n책에서는 세 가지 관심사가 섞여있는 것이 문제라고 한다. DB 연결 커넥션 가져오기 SQL 문장을 담은 St…","fields":{"slug":"/topring-chapter1/"},"frontmatter":{"categories":"Spring","title":"오브젝트와 의존관계 (토비의 스프링)","date":"September 11, 2022"}},"next":{"fields":{"slug":"/collection-beans/"}},"previous":{"fields":{"slug":"/topring-chapter2/"}}},{"node":{"id":"8ad80e3d-72fa-5a20-95b5-1908bea8dfd3","excerpt":"해당 포스팅은 줍줍 개발 과정 중 맞딱뜨린 문제점과 답을 찾아가는 과정을 다른 방식으로 재구성한 글이다. 생각보다 글이 길어진 고로, 문제상황과 해결방안만 보고싶다면 문제상황 빈 컬렉션 주입을 이용한 해결 예시코드 이 둘을 보기를 권한다. 간단한 게시판 서비스를 상상하기 회원 가입과 탈퇴 당신은 지나가던 고양이의 의뢰로 서버를 개발하게 되었다.\n고양이는 🐱 닉네임을 입력하면 가입이 가능하고, 탈퇴할 수 있는 서비스를 만들어 주세요 💬 라고 요구했다.\n그래서 나는 (그리고 이 글을 볼 대부분의 사람들은) 이건 쉽지~ 하고 간단한 컨트롤러를 만들었다. 그런데 이제 엔드포인트를 하나로 하고 이 코드를 본 고양이가 말했다. 🐱 엔드포인트를 하나로 통일할래요. 그리고 이게 회원 가입인지 탈퇴인지는 body안에 쓸게요. 이렇게요. 💬 코드가 이상해지기 시작한다. 그래도 아직 납득 가능한 수준이다. 여기에 포스팅 기능도 몽땅 넣어줘 이 코드를 본 고양이가 또 요구했다.\n🐱 각자 게시글을 쓰고,…","fields":{"slug":"/collection-beans/"},"frontmatter":{"categories":"Spring 트러블슈팅","title":"[Spring] 모든 요구사항을 한 엔드포인트로 처리해보자! 😂","date":"August 27, 2022"}},"next":{"fields":{"slug":"/jpa-is-new/"}},"previous":{"fields":{"slug":"/topring-chapter1/"}}},{"node":{"id":"5485e17d-94cb-5d24-89c6-9869ebf17fd4","excerpt":"Long id = 0L ? 코틀린을 공부하다 참고하려고 우테코 지원 플랫폼의 코드를 봤다.\n그 중 흥미로운 점을 발견했는데, 엔티티를 생성할 때 를 로 초기화 하는 것이다. 이게 왜 흥미로웠냐면 상수 픽스쳐 사용 주의 포스팅에서 썼듯이 가 이 아니면 를 시행한다고 생각했기 때문이다.\n굳이 로 초기화하면  비용만 추가로 들 것 같았다.   그래서 자바 스프링에서 직접 간단한 엔티티를 만들고, id를 로 지정해 저장해봤다. 실행된 SQL문을 보면, 역시나 문이 문에 선행되었다.\n대신 가 수행된 것이다. JPA의 새로운 엔티티 식별법  상속 시 쓰게 되는 구현체인 의 를 다시 살펴보자. 참 명료한 언어로 잘 짜여있다.\n니까 엔티티가 새로운 엔티티라면 를, 아니라면 를 수행한다.\n그렇다면 이 는 어디서 가져오는 걸까? 를 구현한 몇 개의 클래스에 디버깅을 걸며 찾아보니 라는 낯선 이름의 클래스에 걸렸다. 코드 상 를 판단하는 조건은 다음과 같다. 엔티티의 가 원시 타입이 아니라면 일 때 …","fields":{"slug":"/jpa-is-new/"},"frontmatter":{"categories":"JPA kotlin","title":"[JPA]는 새로운 엔티티를 어떻게 알아볼까?","date":"August 24, 2022"}},"next":{"fields":{"slug":"/post-construct-profile/"}},"previous":{"fields":{"slug":"/collection-beans/"}}},{"node":{"id":"fa74bf94-c4c4-53ef-a3b5-e3dde0bc36d6","excerpt":"문제상황 서비스 배경지식 첫번째 참고 현재 개발중인 줍줍은 슬랙 무료 워크스페이스의 사라지는 메세지들을 대신 저장하고 보여주는 서비스다.\n메세지 저장을 위해 최초 어플리케이션 구동 시, 해당 워크스페이스에 속한 모든 회원 정보를 가져온다.\n이 역할을 라는 클래스의 안에 작성했다. 이유는 아래와 같았다.    어플리케이션이 구동하는 동안 발생하는 신규 가입, 탈퇴 이벤트는 실시간 반영이 된다 하지만 어플리케이션 최초 구동 전, 또는 업데이트 배포로 어플리케이션이 중지된 사이에 발생한 이벤트는 반영이 안된다 따라서 재구동 시 한 번 슬랙 API를 호출하여, 유저 정보를 업데이트한다 유저 정보를 메시지에서 참조하고 있어서 저장이 선행되어야 했다.\n또, 로그인 시 이 정보와  슬랙 로그인으로 받은 정보를 대조해서 자체 토큰을 발급하는 까닭도 있다. 두번째 참고 슬랙은 라는 이름으로 슬랙 API에 HTTP 요청을 보내고 응답을 받는 객체를 제공한다.\n그래서 슬랙 API 호출이 필요한 곳에서…","fields":{"slug":"/post-construct-profile/"},"frontmatter":{"categories":"Spring 트러블슈팅","title":"[Spring] @PostConstruct를 막아라","date":"August 23, 2022"}},"next":{"fields":{"slug":"/jpa-static-fixture-trouble/"}},"previous":{"fields":{"slug":"/jpa-is-new/"}}},{"node":{"id":"d8b36762-4fef-5be7-8a68-c557aed75585","excerpt":"문제상황 우테코 QNA 미션에서 상수로 선언된 엔티티 픽스쳐가 있었다. 레벨3 같은 팀 크루인 봄이 해당 미션을 진행하다 테스트가 터져 어쩌다보니 같이 원인을 찾게 되었다. 상황을 비슷하게 복구해보자면 이런 구성이었다.   원본 미션 코드에서는 픽스쳐가 로 별도 클래스에 선언되어 있었다. 그런데 테스트 클래스 하나에서만 사용되고 있어서 해당 클래스로 옮겼던 것 같다. 나도 픽스쳐를 옮겼다가, 평소 쓰는 방식대로 한다고 지웠었다. 어쨌든 와 는 의 단방향 연관관계였고, 는 를 통해 저장해주는 상태였다. 그러다 테스트가 터지며 의문의 에러메시지를 마주했다. org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [FK83S99F4KX8OIQM3RO0SASMPWW]; nested exception is org.hibernate.exception.Con…","fields":{"slug":"/jpa-static-fixture-trouble/"},"frontmatter":{"categories":"JPA 트러블슈팅","title":"[JPA] 상수 픽스쳐 사용 주의","date":"August 13, 2022"}},"next":{"fields":{"slug":"/wild-seed/"}},"previous":{"fields":{"slug":"/post-construct-profile/"}}},{"node":{"id":"974e8c24-9935-58ce-9245-bbb561588786","excerpt":"야생 학습을 하면 자연스레 지식이 실전을 뒤따르게 된다. 우테코에서 처음 제대로 경험한 야생 학습은 낯설었으나 너무 잘 적응한 탓인지 어느 순간 당장 쓰이지 않을 지식을 공부하는 게 마땅찮았다. 당장 터지는 테스트를 고치고 싶을 뿐인데 왜 을 알아야 하지? 이걸 쓸 때가 있을까? 좋게 말하면 야생, 나쁘게 말하면 땜빵 마인드로, 그래도 연계되는 지식을 우겨넣고는 있었다. 언젠가는 쓸모가 있겠지 하고.  \n이런 알지만 알지 못하는 죽은 지식이 레벨3 프로젝트를 하다 죽은 줄 알았지만 다 때가 있구나! 로 바뀌는 순간을 겪었다. @Bean은 외부 라이브러리를 등록하고… 나에겐 이 알지만 알지 못하는 죽은 지식이었다.\n@Bean과 @Component의 차이 포스팅을 쓰기도 했고, 의 쓰임새가 뭐냐고 하면 줄줄 얘기할 수 있었다. 개발자가 직접 제어할 수 없는 외부 라이브러리 클래스를 빈에 등록할 때 사용됩니다. 하고. 그런데 좀처럼 을 사용할 일이 없었다. 그러다 레벨3 프로젝트인 줍줍…","fields":{"slug":"/wild-seed/"},"frontmatter":{"categories":"Spring 회고 우아한테크코스","title":"야생에서 사과씨 심기 (@Bean)","date":"August 02, 2022"}},"next":{"fields":{"slug":"/git-submodule/"}},"previous":{"fields":{"slug":"/jpa-static-fixture-trouble/"}}},{"node":{"id":"75ab6283-c820-5191-ac78-8ff6b58e19f0","excerpt":"슬랙이 봇을 강퇴시켰어요 서버에서 슬랙 API를 호출하려면 발급받은 봇 토큰이 필요하다. 해당 정보를 기밀이라고 생각하지 않았는데… 애초에 봇에게 호출할 수 있는 API 제한이 있다 연결된 워크스페이스가 개발을 위해 생성된 줍줍 팀 워크스페이스다 라는 이유에서였다.  그래서 깃헙에 을 포함한 을 올려놨는데… 어느날 API 응답이 오지 않았다. 개발자 도구의 응답에는 이라는 에러 문구가 떴고, 분명 워크스페이스에 정상 추가했던 봇이 사라져 있었다.  슬랙이 봇을 강제 추방시킨 것이었다… 얼마간 잘 썼기에, 일정 주기로 공개 저장소들을 크롤링 해 한번에 정지시키는 게 아닐까 싶다. 설명서를 잘 읽자 슬랙 API에 들어가면 가 떡하니 명시되어 있다.  봇 토큰에는 큰 권한이 있습니다. 토큰은 사용자가 앱을 설치함으로써 권한을 부여했음을 나타냅니다. 앱을 설치한 유저가 준 신뢰를 해치지 않도록 토큰을 안전하게, 기밀로 보관하세요. 최소한 공개적인 형상관리에 토큰을 올리지 마세요. 환경 변…","fields":{"slug":"/git-submodule/"},"frontmatter":{"categories":"ETC 트러블슈팅","title":"[git] 슬랙한테 봇 강퇴당하고 서브모듈 도입한 이야기","date":"July 25, 2022"}},"next":{"fields":{"slug":"/session-cookie-jwt/"}},"previous":{"fields":{"slug":"/wild-seed/"}}},{"node":{"id":"0b4579f8-1439-5de0-b380-59d8d252221d","excerpt":"🔍 세션의 정체를 찾아서 세션의 정의 영어에서 이란 특정 활동이 수행된 기간을 의미한다. 일상 속에서 보자면 나는 꾸준히 PT를 받고 있는데, PT 수업 한 회를 세션이라고 불렀다. 그럼 CS의 세션은 무엇일까? ****을 의미한다. 통신을 하는 동안 세션이 유지된다면 세션의 정보를 이용할 수 있을 것이다. 이런 상태를 이라 부른다. 반대는 라고 부르는데, HTTP 프로토콜이 이에 속한다. (막간 홍보 : HTTP에 관심이 있다면 HTTP 테코톡) HTTP 프로토콜이 이기에, 여러 불편한 상황이 일어난다. 쇼핑몰에서 상품을 장바구니에 담을 때 마다 로그인을 새로 요구한다고 생각해보자. 짜증나서 사려던 것도 안 사고 나가지 않을까? 이런 무상태를 보충하기 위해 상태 유지를 돕는 기술을 함께 사용한다. 그 중 하나가 이다. javax servelet HttpSession 자바 서블릿의 은 인터페이스다. 이 포스팅에서 다룰 내용을 java docs에서 간추려보았다. 유저 정보를 저장함으…","fields":{"slug":"/session-cookie-jwt/"},"frontmatter":{"categories":"Spring CS","title":"세션의 정체를 찾아서(with 🍪, 🪙)","date":"July 09, 2022"}},"next":{"fields":{"slug":"/test-annotations/"}},"previous":{"fields":{"slug":"/git-submodule/"}}},{"node":{"id":"1edd5815-991a-5bfd-bddf-48c3cf82d2d2","excerpt":"DB를 연동하고 스프링을 쓰기 시작하면서 어플리케이션의 구조가 복잡해졌다. 그에 따라 테스트도 다양한 어노테이션을 활용하여 작성해야 했는데, 처음에는 예제를 보며 따라했다. 그러다 각 어노테이션의 정확한 역할과 적용되는 방식이 궁금해 미션을 진행하며 사용한 세 테스트용 어노테이션을 학습했다. @JdbcTest JDBC 기반 컴포넌트만 테스트하는 JDBC 테스트를 위한 어노테이션이다. 이 어노테이션을 사용하면 auto-configuration이 비활성화 되고, JDBC 테스트와 관련된 configuration만 적용된다. 기본적으로 가 붙은 테스트는 트랜젝션 처리가 되고, 각 테스트가 죵로된 후 롤백을 시행한다. 또한 명시됐거나 자동 설정된 DataSource 대신 인메모리 DB를 사용하게 된다.를 사용하면 이런 설정을 덮어쓸 수 있다.  \n전체 어플리케이션 설정을 사용하면서 인메모리 DB를 사용하고 싶다면, 이 어노테이션 대신 와 를 조합해 사용하는 게 낫다. 를 사용한다면 를 함…","fields":{"slug":"/test-annotations/"},"frontmatter":{"categories":"Spring","title":"[Spring] @JdbcTest, @WebMvcTest, @SpringBootTest","date":"May 29, 2022"}},"next":{"fields":{"slug":"/sql-no-wildcard/"}},"previous":{"fields":{"slug":"/session-cookie-jwt/"}}},{"node":{"id":"daccaece-c833-5d4f-b63f-7213dd06dafe","excerpt":"지금까지 DB를 사용하는 미션에서 컬럼 수가 적기에  문을 자주 썼다. 그런데 로 모든 컬럼을 가져오는 것 보다 컬럼을 명시해 가져오는 게 낫다는 영문 포스팅을 제이슨이 공유해주셔서 읽었다. 7 Reasons Why Using SELECT * FROM TABLE in SQL Query Is a Bad Idea 다음은 해당 포스팅을 전체 번역한 것이다. SELECT * FROM TABLE 쿼리문을 쓰는 게 좋지 않은 7가지 이유 인터넷에서  쿼리문을 쓰는 게 나쁘니 피하라고 하는 많은 글을 봐왔다. 그 대신 정확한 컬럼을 나열해야 한다. 이는 내가 주니어 개발자에게 가르치기도 하는 좋은 제안이자 좋은 SQL 작성 습관 중 하나인데, 많은 사람들이 그 이유는 설명하지 않는다. 왜 쿼리문에서 을 쓰면 안되는지 이유를 설명하지 않고 SQL 개발자들을 설득하기란 어려운데, 대개 Oracle database에서 를 실행하는 것으로 SQL 학습을 시작하기 때문이다. 이 글에서 왜  쿼리문을 쓰…","fields":{"slug":"/sql-no-wildcard/"},"frontmatter":{"categories":"ETC","title":"[SQL] SELECT * 쓰지 말자","date":"May 25, 2022"}},"next":{"fields":{"slug":"/optional-and-method-naming/"}},"previous":{"fields":{"slug":"/test-annotations/"}}},{"node":{"id":"1b911b70-995d-517b-9927-cdf37dda6734","excerpt":"우테코 레벨1 웹체스 미션에서 일급 컬렉션에서 특정 요소를 로 꺼내는 메서드를 작성했다. 그런데 해당 요소를 그냥 꺼내는 메서드가 따로 있었고, 이름이 겹치고 싶지 않아 생각하다 를 붙였다. 레벨2에서 DB를 본격적으로 사용하며 객체에서 데이터 조회를 할 때, 와  중 무엇을 쓸지 고민했다. 은 처럼 느껴져서 를 사용했는데, 의  패턴을 보니 을 쓰는 경우가 많았다. 그래서 둘의 차이를 찾아봤다. find vs get 스프링 Data의  인터페이스는 를 반환한다. 반면 같은 스프링 Data의 JPA repository에서는 T를 반환한다. 는 찾는 값이 없을 경우 을, 는 찾는 값이 없을 경우 한다는 차이가 있다. 여기서 볼 수 있듯이 일반적으로 반환 값이 없을 수 있는 경우 을, 항상 있어야 하는 경우 을 붙인다. 를 쓰면 api 사용자에게 이름을 통해 반환값이 없을 수 있음을 알려 줄 수 있는 것이다. 반면, 반환형이 같은 컬렉션이라면 값이 없어도 이 아닌 을 반환하면 된다. …","fields":{"slug":"/optional-and-method-naming/"},"frontmatter":{"categories":"Java","title":"Optional과 메서드 네이밍 find vs get","date":"May 23, 2022"}},"next":{"fields":{"slug":"/7sql-study/"}},"previous":{"fields":{"slug":"/sql-no-wildcard/"}}},{"node":{"id":"57e95f14-5ebd-5208-93d4-1c7c93d1f47f","excerpt":"우테코 레벨1 sql 수업에서 두 sql 문제를 풀어야 했다. 첫번째 문제를 시행착오 끝에 풀고, 두번째 문제는 풀지 못했는데, 척척 푸는 크루들이 많은 걸 보고 sql 공부의 필요성을 절실하게 느꼈다. 그래서 일주일 간 매일 문제를 3개씩 푸는 스터디를 개설했다. 7SQL 기간 : 1주일 성격 : 각자 문제풀기 인원 : 7명 목표 : 기초적인 SQL 문법 익히기 진행 방식 : 매일 한 사람씩 돌아가며 SQL 문제를 출제, 각자 풀고 출제자가 채점 7SQL 노션 모집글에 자세한 진행 방식이 적혀있으며. 7SQL 스프레드 시트에서 진행 기록인 출제한 문제와 각자의 답안, 정답 여부를 볼 수 있다. 스터디가 끝나고 간단한 회고를 가졌다. 좋았던 점 공통적으로 언급된 좋았던 점 SQL 문법에 익숙해진다는 목표를 달성했다 실력이 늘었다 개별적으로 업급된 좋았던 점 자율 참여였다 시간을 많이 들이지 않고도 학습할 수 있는 방식이었다 아쉬웠던 점 공통적으로 언급된 아쉬웠던 점 같은 테이블과 …","fields":{"slug":"/7sql-study/"},"frontmatter":{"categories":"우아한테크코스 회고","title":"7SQL 스터디 회고","date":"May 11, 2022"}},"next":{"fields":{"slug":"/dao-and-repository/"}},"previous":{"fields":{"slug":"/optional-and-method-naming/"}}},{"node":{"id":"9859d6a7-4118-54f9-aac5-8737d88c21ef","excerpt":"웹 체스 미션을 진행하면서 을 이용해 DB에 접근하는 모든 클래스의 이름을 라 지었다가 아래와 같은 코멘트를 받았다.   코멘트를 받기 전까지 와 가 이름만 다른 같은 개념이라 생각했다. 그래서 이 둘의 차이에 대해 알아보았다. @Repository 문서 스프링  어노테이션 자바 문서에는 다음과 같이 적혀 있다.   적용 된 클래스가 Repository 임을 나타냅니다. 이는 도메인 주도 설계(에릭 에반스)에서 정의한 저장소를 캡슐화하고, 저장하고, 검색하여 객체의 컬렉션처럼 다루는 메커니즘을 뜻합니다. Data Access Object와 같은 전통적인 자바 EE 패턴을 사용하는 팀도 이 스테레오타입을 DAO 클래스에 적용할 수 있습니다. 다만 그 전에 Data Access Object와 DDD-style repositories의 차이를 이해하는 것이 좋습니다. 이 어노테이션은 다목적 스테레오타입이고 개별 팀은 자신들만의 축소된 의미에 맞춰 적절하게 사용하면 됩니다. 어노테이트된 …","fields":{"slug":"/dao-and-repository/"},"frontmatter":{"categories":"ETC","title":"DAO 와 Repository","date":"May 07, 2022"}},"next":{"fields":{"slug":"/left-join-inner-join/"}},"previous":{"fields":{"slug":"/7sql-study/"}}},{"node":{"id":"17ad5af7-72e6-5ac7-b502-5f6e124319a7","excerpt":"left join / (inner) join 7SQL 스터디를 하다 자신만만하게 풀었는데 기대한 답이 나오지 않는 문제가 있었다. 주문을 한 번도 하지 않은 모든 고객을 찾아주세요. 스터디는 w3schools의 sql 실습 페이지를 이용했는데, 고객의 정보가 있는  테이블과  테이블이 있다. 주문이 없는 고객을 찾기 위해  테이블에  테이블을 한 다음, 에 이 있는 걸 확인하려 했다. 그런데 실행 결과를 보니 가 없는  고객은 아예 결과에 잡히지 않았다.  아직 sql 문법에 익숙하지 않아서  키워드를 차례로 앞에 붙여봤는데, 일 때만 가 인 경우도 포함되어 나왔다.  찾아보니 은 , 을 포함한 은 을 나타낸다 한다.  를 하면, A 테이블의 모든 행을 조회하면서 B에 없는 값은 로 처리된다. 나머지 은 해당 사이트에서 지원하지 않아 써보진 못했지만, 스터디 덕분에 차이를 확실히 알게 되었다. left join / (inner) join","fields":{"slug":"/left-join-inner-join/"},"frontmatter":{"categories":"ETC","title":"[SQL] left join vs (inner) join","date":"April 30, 2022"}},"next":{"fields":{"slug":"/level1-interview/"}},"previous":{"fields":{"slug":"/dao-and-repository/"}}},{"node":{"id":"b0e43b21-aa44-5a47-b733-12cceb9f0524","excerpt":"레벨로그란? 우아한테크코스에는 가 존재한다. 일종의 모의 면접으로 한 레벨 동안 배운 내용을 인터뷰를 통해 점검하는 것이다. 6명의 팀으로 진행했는데, 레벨 로그를 토대로 1명의 인터뷰어를 3명의 크루 인터뷰이와 코치가 인터뷰하고, 2명이 옵저버(관찰자)로 참여한다. 역할은 돌아가면서 바뀐다. 나는 크루 와 코치 과 함께 했다.   인터뷰어 회고 레벨1 레벨로그는 키워드 중심으로 간략하게 작성했다. 레벨1동안 많은 걸 배웠지만 직접 로그로 쓰기 전 까지는 정확히 몰랐다. 그런데 인터뷰를 위해 로그를 쓰면서부터 한 번 정리할 수 있었다. 감사하게도 이 내 인터뷰 기록을 남겨줘서 복기가 쉬웠다. 그리고 가 저녁에 피드백을 보내줬다😭 정말 너무 고마워서 눈물이 났다… 테스트 코드의 유지보수 비용을 줄일 수 있는 방법에 대하여 답변 준비해보기 경험해보지 못한 사례나 모르는 내용에 대한 질문을 받았을 때, 차분히 모름을 인정하되 현재 생각나는 추론과 이유를 제시하기 인터뷰어로부터 같은 질문…","fields":{"slug":"/level1-interview/"},"frontmatter":{"categories":"우아한테크코스 회고","title":"레벨1 레벨 인터뷰 회고","date":"April 26, 2022"}},"next":{"fields":{"slug":"/spring-study-1/"}},"previous":{"fields":{"slug":"/left-join-inner-join/"}}},{"node":{"id":"8f33b17b-a573-5fe3-accd-6fc7e63e1ce6","excerpt":"사건의 발단 우테코 레벨1 마지막 미션인 웹 체스 강의에서 테스트 더블을 이용해 DB 연결 없이 DAO 객체를 테스트 하는 걸 배웠다. 웹 체스에 스프링 프레임워크를 적용하고 컨트롤러를 짜는데, 컨트롤러도 DB 연결 없이 테스트 할 수 있지 않을까? 하는 생각이 들었다. 체스방의 정보(id, name)을 담은  테이블을 대신 할 와 를 주입받는 를 만든 것 까진 아주 좋았다. 문제는 컨트롤러를 짜며 생겼다. 당초 계획은 를 주입받은 를 테스트 환경에서만 컨트롤러에 주입하기였다. 하지만 스프링에서는 사용자가 직접 new로 객체를 생성하지 않고 로 등록된 클래스를 스캔해 빈(Bean)으로 생성한다. 그래서 테스트에서만 필요한 객체를 주입 할 수가 없었다. 일단 해결은 했으나… 페어 더즈와 방법을 고민하다 지나가던 제이슨이 도와줘서 문제를 해결할 수 있었다. 먼저 test 폴더 하위에 를 추가로 작성해 프로덕션과 다른 설정이 적용되게 한다. 공식 문서에 따르면, 해당 설정은 이미 존재하…","fields":{"slug":"/spring-study-1/"},"frontmatter":{"categories":"Spring 우아한테크코스","title":"[Spring] DB 연결 없는 컨트롤러 테스트에서 시작한 스프링 공식 문서 공부","date":"April 25, 2022"}},"next":{"fields":{"slug":"/level1-study-log/"}},"previous":{"fields":{"slug":"/level1-interview/"}}},{"node":{"id":"b7b559c5-b0f9-5fdb-8a69-f2fa3c40b5d1","excerpt":"나는 살면서 스터디를 해 본 적이 없다. 공부는 혼자 하거나 최소 친구와 하는 게 편하고 좋았다. 개발도 비전공으로 독학 후 국비학원을 다녔다. 다른 사람들과 개발 얘기를 한 적도 당연히 거의 없었다. 이런 성향을 고치고 싶어 이펙티브 자바 스터디를 열었고, 레벨1을 겪으며 을 깨우치고 독서회를 열게 되었다. 방학을 맞아 가벼운 회고를 써본다.  객체지향의 사실과 오해 독서회 기간 : 일회성(약 2시간) 성격 : 독서회 인원 발표 : 4명 참관 : 7명 목표 : 독서 인사이트 공유 진행 방식 : 제한없는 자유발표 + 짧은 회고 정확한 날짜는 기억나지 않지만, 블랙잭 미션이 끝난 주의 금요일 저녁이었던 것 같다. 슬랙으로 신청을 받았는데, 신청 인원이 생각보다 저조해서 의기소침해져 있었다. 모집글에는 단 한 명만 신청해도 둘이서 진행한다고 써놓긴 했지만… 그런데 뜻밖에도 참관객이 많이 와서 기뻤다.  발표 인원이 4명 뿐이라 별도의 시간 제한 없이 자유로운 발표로 진행했다. 객체지향…","fields":{"slug":"/level1-study-log/"},"frontmatter":{"categories":"회고 우아한테크코스","title":"레벨1 스터디 운영 회고","date":"April 19, 2022"}},"next":{"fields":{"slug":"/the-essence-of-object-orientation/"}},"previous":{"fields":{"slug":"/spring-study-1/"}}},{"node":{"id":"bf035432-a504-57de-b31d-d1ef168ababf","excerpt":"객체지향의 사실과 오해는 널리 알려진 개발자 필독서 중 하나로, 김영한님의 인프런 강의를 듣다 알게 되었다. 그 후로 책을 긴 텀을 두고 네다섯번 정독했다. 읽기 쉽고 가벼운 책이기도 하고, 경험치가 누적됨에 따라 새로 발견하는 것이 있었기 때문이다. 이 책은 우아한테크코스의 레벨1 필독서에 포함되어 있다. 블랙잭 미션을 마치고 충격과 실의에 빠져 는 생각에 책을 다시 펼쳤다. 그래서 이 글은 책의 전체 내용 보다 특정한 주제와 그에 따른 의견을 중심으로 쓰여졌음을 양해바란다. 내 블랙잭 미션은 왜 망했을까? 네오의 강의에서 을 배우고, 이 책을 다시 읽기 전까진 미션의 패인을 라 생각했었다. 만약 나와 비슷한 생각을 가진 사람이 있다면 흥미롭게 읽을 수 있을 것이다. 이 책을 읽기 전에…  무언가를 설명함에 있어 비유는 때때로 혼란을 일으킨다. 객체지향을 설명코자 나온 많은 비유가 오히려 입문자들에게 잘못된 관념을 심고 있다. 조부모-부모-자식과 자산의 흐름 또는 동물계의 분류와…","fields":{"slug":"/the-essence-of-object-orientation/"},"frontmatter":{"categories":"우아한테크코스 독서","title":"객체지향의 사실과 오해 (내 블랙잭은 왜 망했을까)","date":"April 18, 2022"}},"next":null,"previous":{"fields":{"slug":"/level1-study-log/"}}}],"categories":["All","Spring","트러블슈팅","JPA","kotlin","회고","우아한테크코스","ETC","CS","Java","독서"]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}