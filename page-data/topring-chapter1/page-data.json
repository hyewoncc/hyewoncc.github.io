{"componentChunkName":"component---src-templates-blog-template-js","path":"/topring-chapter1/","result":{"data":{"cur":{"id":"4c8d6837-84c0-5d44-bc31-a7d68bc3edf6","html":"<p>해당 포스팅은 <a href=\"https://search.shopping.naver.com/book/catalog/32463364883?cat_id=50010881&#x26;frm=PBOKPRO&#x26;query=%ED%86%A0%EB%B9%84%EC%9D%98+%EC%8A%A4%ED%94%84%EB%A7%81&#x26;NaPm=ct%3Dl7xcl9rk%7Cci%3D2beb40c880925062f67b8f4c293f36caed990219%7Ctr%3Dboknx%7Csn%3D95694%7Chk%3De46d0a257b549c8d320d7074983959664f253dd5\">토비의 스프링 3.1</a>을 읽고 책 내용과 실습 코드 정리 및 스터디에서 나온 의견을 정리한 포스팅이다.</p>\n<h2 id=\"1장-오브젝트와-의존관계\" style=\"position:relative;\"><a href=\"#1%EC%9E%A5-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%99%80-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84\" aria-label=\"1장 오브젝트와 의존관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1장 오브젝트와 의존관계</h2>\n<p>늘 <code class=\"language-text\">개발자인 나는 왜 스프링을 사용했는가</code>만 생각했기에, 1장 서두의 <code class=\"language-text\">스프링은 왜 자신을 쓰라고 하는가</code>가 중점인 스프링의 핵심 철학이 인상깊었다.\n그래서 포스팅을 인용으로 시작한다.</p>\n<blockquote>\n<p>자바 엔터프라이즈 기술의 혼란 속에서 잃어버렸던 객체지향 기술의 진정한 가치를 회복시키고, 그로부터 객체지향 프로그래밍이 제공하는 폭넓은 혜택을 누릴 수 있도록 기본으로 돌아가자는 것이 바로 스프링의 핵심 철학이다.<br>\n그래서 스프링이 가장 관심을 많이 두는 대상은 오브젝트다.<br>\np.53</p>\n</blockquote>\n<h2 id=\"초난감-dao-개선기\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EB%82%9C%EA%B0%90-dao-%EA%B0%9C%EC%84%A0%EA%B8%B0\" aria-label=\"초난감 dao 개선기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초난감 DAO 개선기</h2>\n<p>JDBC API를 처음 배우며 만들었던 모습의 <code class=\"language-text\">DAO</code> 클래스를 만들었다.\n제일 기본적인 기능으로 User 정보를 단건 저장하는 <code class=\"language-text\">add()</code>, 단건 조회하는 <code class=\"language-text\">get()</code>이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">MYSQL_JDBC_DRIVER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">MYSQL_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/springbook\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">MYSQL_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"spring\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">MYSQL_PASSWORD</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MYSQL_JDBC_DRIVER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>\n                <span class=\"token constant\">MYSQL_URL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MYSQL_USER</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MYSQL_PASSWORD</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">PreparedStatement</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"insert into users(id, name, password) values(?, ?, ?)\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MYSQL_JDBC_DRIVER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>\n                <span class=\"token constant\">MYSQL_URL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MYSQL_USER</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MYSQL_PASSWORD</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">PreparedStatement</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"select id, name, password from users where id = ?\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>비록 동작은 잘 하지만 썩 잘 짠 코드 같진 않다.\n어느 부분이 문제일까?\n책에서는 <strong>세 가지 관심사가 섞여있는 것</strong>이 문제라고 한다.</p>\n<ul>\n<li>DB 연결 커넥션 가져오기</li>\n<li>SQL 문장을 담은 Statement를 만들고 실행</li>\n<li>자원 반납</li>\n</ul>\n<p>이 비대한 <code class=\"language-text\">DAO</code>를 멋진 <code class=\"language-text\">DAO</code>로 바꾸려면 <strong>관심사를 분리</strong>해야 한다.\n프로그램의 변경은 보통 한가지 관심사에 대해 일어난다.\n예를 들어 <code class=\"language-text\">연결할 DB를 다른 DB로 변경한다</code>, <code class=\"language-text\">실행할 SQL 문이 바뀌었다</code>가 있겠다.\n테이블이 10개, 20개로 늘어났을 때, 연결할 DB가 바뀌었다고 20개의 <code class=\"language-text\">DAO</code>클래스를 다 수정하게 된다면 곤란하다.\n<strong>분리와 확장</strong>을 고려한 설계로 작업을 최소화하고, 변경이 문제를 일으키지 않게 하나씩 개선해보자.</p>\n<p>💡 토프링에서 말한 관심사의 분리란?</p>\n<blockquote>\n<p>관심이 같은 것끼리는 하나의 객체 안으로 또는 친한 객체로 모이게 하고, 관심이 다른 것은 가능한 한 따로 떨어져서 서로 영향을 주지 않도록 분리하는 것</p>\n</blockquote>\n<br>\n<h3 id=\"메서드가-한가지-일을-하도록-분리\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C%EA%B0%80-%ED%95%9C%EA%B0%80%EC%A7%80-%EC%9D%BC%EC%9D%84-%ED%95%98%EB%8F%84%EB%A1%9D-%EB%B6%84%EB%A6%AC\" aria-label=\"메서드가 한가지 일을 하도록 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드가 한가지 일을 하도록 분리</h3>\n<p><code class=\"language-text\">DB 연결 커넥션 가져오기</code> 관심사를 <code class=\"language-text\">메서드 추출</code>을 통해 분리할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token class-name\">PreparedStatement</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"insert into users(id, name, password) values(?, ?, ?)\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"jdbc:mysql://localhost:3306/springbook\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spring\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"book\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Connection</code>을 가져오는 부분을 분리해 <code class=\"language-text\">add(), get()</code>의 중복 코드를 제거했다.\n이제 DB 접속 정보가 바뀌면 두 메서드의 코드를 수정하는 대신, <code class=\"language-text\">getConnection()</code>의 코드만 수정하면 된다.\n하지만 다른 DB에 접속하도록 <strong>확장</strong>하려면 이 코드는 어떻게 바뀔까?\n새로운 <code class=\"language-text\">DAO</code>를 만들어 <code class=\"language-text\">getConnection()</code>을 바꿔야 한다.\n<code class=\"language-text\">add(), get()</code>은 그대로 두 클래스 간의 중복 코드가 될 것이다.</p>\n<br>\n<h3 id=\"상속으로-중복을-공유하되-추상메서드-사용\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D%EC%9C%BC%EB%A1%9C-%EC%A4%91%EB%B3%B5%EC%9D%84-%EA%B3%B5%EC%9C%A0%ED%95%98%EB%90%98-%EC%B6%94%EC%83%81%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"상속으로 중복을 공유하되 추상메서드 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속으로 중복을 공유하되 추상메서드 사용</h3>\n<p>그렇다면 상속을 통해 <code class=\"language-text\">add(), get()</code> 기능을 공유하도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GoogleUserDao</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"jdbc:mysql://localhost:3306/google\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"password\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>슈퍼클래스 <code class=\"language-text\">UserDao</code>에 기본적인 로직의 흐름을 만들었다.\n그리고 DB 연결 정보마다 달라질 <code class=\"language-text\">getConnection()</code>을 추상 메서드로 지정했다.\n이제 다른 DB를 쓸 거라면, 상속 받은 클래스에서 <code class=\"language-text\">getConnection()</code>만 추가 구현하면 된다.\n여기서 <code class=\"language-text\">GithubUserDao</code>가 추가로 생겨도 <code class=\"language-text\">add(), get()</code>은 슈퍼클래스의 메서드를 호출해 사용할 수 있다.\n이런 방식을 <code class=\"language-text\">템플릿 메소드 패턴</code>이라 부른다.</p>\n<p>동시에 <code class=\"language-text\">Connection getConnection()</code>을 구현해 각자 다른 객체를 리턴하게 둔 것을 <code class=\"language-text\">팩토리 메소드 패턴</code>이라 한다.\n처음 책을 읽었을 때는 이 둘의 차이가 헷갈렸다.\n<code class=\"language-text\">템플릿 메소드 패턴</code>은 변하지 않는 기능(=기본 기능 골격)을 상속으로 공유하는 것에,\n<code class=\"language-text\">팩토리 메소드 패턴</code>은 특정 오브젝트를 반환하는 메소드를 하위 클래스에서 구현하는 것에 초점을 맞춰 이해했다.\n후자의 경우 대개 인터페이스를 반환하도록 한다.\n그렇게 하면 슈퍼클래스는 하위 클래스가 어떤 구현체의 인스턴스를 반환할 지 숨길 수 있다.</p>\n<br>\n<h3 id=\"관심사를-클래스로-분리\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EC%8B%AC%EC%82%AC%EB%A5%BC-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EB%B6%84%EB%A6%AC\" aria-label=\"관심사를 클래스로 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관심사를 클래스로 분리</h3>\n<p>여기서 더 나아가, <code class=\"language-text\">DB 연결 커넥션 가져오기</code> 라는 관심사를 별도 클래스로 분리해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DBConnector</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">makeConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"jdbc:mysql://localhost:3306/springbook\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spring\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"book\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DBConnector</span> dbConnector<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dbConnector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DBConnector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> dbConnector<span class=\"token punctuation\">.</span><span class=\"token function\">makeConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">DB 연결 커넥션 가져오기</code>라는 관심사가 <code class=\"language-text\">UserDao</code>와 클래스 차원에서 분리되었다.\n하지만 <code class=\"language-text\">DB 설정이 달라지면 코드를 수정해야 한다</code>는 단점이 되돌아왔다.\n이를 인터페이스로 분리하고, 구현체를 추가하는 식으로 해결할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DBConnector</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Connection</span> <span class=\"token function\">makeConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GoogleDBConnector</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DBConnector</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">makeConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"jdbc:mysql://localhost:3306/google\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spring\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"book\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DBConnector</span> dbConnector<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dbConnector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GoogleDBConnector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 DB 설정이 달라진다면 <code class=\"language-text\">DBConnector</code>의 구현체만 추가되면 된다.</p>\n<br>\n<h3 id=\"관계설정-책임의-분리\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EA%B3%84%EC%84%A4%EC%A0%95-%EC%B1%85%EC%9E%84%EC%9D%98-%EB%B6%84%EB%A6%AC\" aria-label=\"관계설정 책임의 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관계설정 책임의 분리</h3>\n<p>여기서 앞서 쓰지 않은 숨겨진 관심사가 있다.\n바로 <code class=\"language-text\">Dao</code>에서 <code class=\"language-text\">DBConnector</code>의 구현체를 정하는 문제다.\n어떤 <code class=\"language-text\">DBConnector</code>를 사용할지 정하는 관심사를 <code class=\"language-text\">Dao</code>와 분리하려면, <strong>클라이언트 오브젝트</strong>로 이동시키면 된다.\n실습에서는 간단히 <code class=\"language-text\">main()</code> 메서드 안으로 이동시켜봤다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token class-name\">UserDao</span> userDao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GoogleDBConnector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blackdog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"검은개\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    userDao<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DBConnector</span> dbConnector<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">DBConnector</span> dbConnector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dbConnector <span class=\"token operator\">=</span> dbConnector<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">UserDao</code>는 <code class=\"language-text\">DBConnector</code>에 어떤 구현체가 올지 모른다.\n<code class=\"language-text\">UserDao</code>를 사용하는 <strong>클라이언트</strong>에서 필요에 따라 구현체를 주입해주면 된다.</p>\n<p>후에 스프링까지 적용한 전체 실습 코드는 <a href=\"https://github.com/hyewoncc/topring/tree/chapter1\">깃헙 topring 레포</a>에서 볼 수 있다.</p>\n<br>\n<h2 id=\"dao-개선으로-보는-객체지향\" style=\"position:relative;\"><a href=\"#dao-%EA%B0%9C%EC%84%A0%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EB%8A%94-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5\" aria-label=\"dao 개선으로 보는 객체지향 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dao 개선으로 보는 객체지향</h2>\n<p><code class=\"language-text\">DB 연결 커넥션 가져오기</code>라는 기능 관심사 하나로 이렇게 많은 얘기를 할 줄 몰랐다.\n인상깊었던 내용을 중점으로 정리해봤다.</p>\n<h3 id=\"클래스오브젝트-의존과-di\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%9D%98%EC%A1%B4%EA%B3%BC-di\" aria-label=\"클래스오브젝트 의존과 di permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스/오브젝트 의존과 DI</h3>\n<blockquote>\n<p>클래스 사이에 관계가 만들어진다는 것은 한 클래스가 인터페이스 없이 다른 클래스를 직접 사용한다는 뜻이다. 따라서 클래스가 아니라 오브젝트와 오브젝트 사이의 관계를 설정해줘야 한다.<br>\np.78</p>\n</blockquote>\n<p>‘A가 B를 의존하고 있다’라고 하면 이제까지는 ‘A가 B를 사용하고 있다’로 생각했다.\n그래서 클래스 사이의 관계와 <strong>오브젝트</strong> 사이의 관계를 구분해서 생각하지 않았다.\n앞선 예제에서 <code class=\"language-text\">UserDao</code>를 보면, 내부 코드 상으로 어떤 오브젝트(=구현체)를 사용할지 알 수 없다.\n이 구현체가 정의되는 곳은 외부의 <strong>클라이언트 오브젝트</strong>이며, 실제 오브젝트와의 관계는 <strong>런타임 시점</strong>에 맺어진다.</p>\n<p>DI(의존관계 주입)까지 같이 짚고 넘어가자면, 이 오브젝트간의 의존 관계를 외부(=클라이언트)에서 설정하는 것이다.\n예제 코드상 <code class=\"language-text\">Main</code> 클래스는 <code class=\"language-text\">main()</code> 메서드에서 <code class=\"language-text\">GoogleDBConnector</code> 인스턴스의 참조를 <code class=\"language-text\">UserDao</code>에 전달한다.\n이때 두 오브젝트간의 의존관계가 맺어진다.</p>\n<br>\n<h3 id=\"개방-폐쇄-원칙open-closed-principle\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84-%EC%9B%90%EC%B9%99open-closed-principle\" aria-label=\"개방 폐쇄 원칙open closed principle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개방 폐쇄 원칙(Open-Closed Principle)</h3>\n<p>우테코 레벨1 쯤에 <code class=\"language-text\">확장에는 열려있고 변경에는 닫혀있다</code>는 설명을 제대로 이해하지 못했었다.\n그냥 ‘코드를 추가해서 기능이 늘어남’을 ‘확장’이라 생각했다.\n예제로 보자면 <code class=\"language-text\">UserDao</code>에 <code class=\"language-text\">delete()</code> 메서드가 생기는 걸 확장이라 여겼다.\n다행히 이 큰 오해는 누군가 바로잡아줬었다.</p>\n<p>어쨌든 현재 <a href=\"https://github.com/hyewoncc/topring/tree/chapter1\">최종 예제 코드</a>에서 <code class=\"language-text\">DBConnector</code> 클래스는 <code class=\"language-text\">DB 연결</code>이라는 하나의 관심사에 집중하고 있다.\n이를 <strong>응집도가 높다</strong>고 한다.\n동시에 해당 DB연결에 어떤 변경이 생기더라도 <code class=\"language-text\">UserDao</code>에 영향을 끼치지 않는다.\n이렇게 변경 사항이 전파되지 않고 느슨하게 연결된 상태를 <strong>결합도가 낮다</strong>고 한다.\n<code class=\"language-text\">DBConnector</code>의 구현체를 만들어 다른 DB 연결이라는 <code class=\"language-text\">확장에 열려</code>있고, 이 변경에 다른 클래스가 영향을 받지 않기에 <code class=\"language-text\">변경에는 닫혀</code>있다.</p>\n<br>\n<h3 id=\"전략-패턴\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4\" aria-label=\"전략 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전략 패턴</h3>\n<p>전략 패턴은 우테코의 기념비적인 첫 미션 자동차 경주에서 <code class=\"language-text\">랜덤값에 따라 달라지는 결과를 테스트하기</code>라는 문제를 해결하며 접했던 디자인 패턴이다.\n당시에는 <code class=\"language-text\">값 하나를 제공한다</code>는 관심사를 인터페이스로 분리한 것이 충격적으로 획기적이었다.\n공부보다 실전을 통해 체득한 개념이라 전략 패턴을 설명하라 하면 항상 실전 예제를 들었던 것 같은데…\n토프링에서 아주 우아하게 정의한 부분을 보니 신선했다.</p>\n<blockquote>\n<p>전략 패턴은 자신의 기능 맥락(context)에서, 필요에 따라 변경이 필요한 알고리즘을 인터페이스를 통해 통째로 외부로 분리시키고, 이를 구현한 구체적인 알고리즘 클래스를 필요에 따라 바꿔서 아요할 수 있게 하는 디자인 패턴이다.<br>\n여기서 말하는 알고리즘이란… 독립적인 책임으로 분리가 가능한 기능을 뜻한다.<br>\np.87</p>\n</blockquote>\n<br>\n<h3 id=\"ioc제어의-역전\" style=\"position:relative;\"><a href=\"#ioc%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84\" aria-label=\"ioc제어의 역전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IoC(제어의 역전)</h3>\n<p>빈출 면접 질문 중에 <em>라이브러리와 프레임워크의 차이</em>가 있는 걸로 안다.\n라이브러리는 자주 쓰는 코드를 모듈화 한 것… 프레임워크는 뼈대… 이런 답이 떠올랐던 것 같다.\n그런데 프레임워크도 <code class=\"language-text\">제어의 역전</code> 개념이 적용된 것이라 해서 큰 충격을 받았다…</p>\n<blockquote>\n<p>라이브러리를 사용하는 애플리케이션 코드는 애플리케이션 흐름을 직접 제어한다.<br>\n…반면에 프레임워크는 거꾸로 애플리케이션 코드가 프레임워크에 의해 사용된다.<br>\np.93</p>\n</blockquote>\n<br>\n<p>이제까지 읽은 기술 책들은 1장이 제일 쉬웠다.\n그런데 토프링은 1장부터 밀도가 장난아니어서 한번 놀라고,\n스프링 공부 하려고 읽었는데 객체지향에 대해 더 흥미롭고 좋은 얘기가 나와서 두번 놀랐다.\n1장 후반부의 용어 정리나 스프링을 이용한 DI의 경우 포스팅에서 중요한 내용이 아니라 생각해 뺐을 정도다.\n객체지향 얘기 만으로 이 책을 산 값을 한다고 느꼈을 정도다.\n남은 두 개의 관심사는 앞으로 어떻게 해결할지, 뒤에는 어떤 얘기가 나올지 기대된다.</p>\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1%EC%9E%A5-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%99%80-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84\">1장 오브젝트와 의존관계</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B4%88%EB%82%9C%EA%B0%90-dao-%EA%B0%9C%EC%84%A0%EA%B8%B0\">초난감 DAO 개선기</a></p>\n<ul>\n<li><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C%EA%B0%80-%ED%95%9C%EA%B0%80%EC%A7%80-%EC%9D%BC%EC%9D%84-%ED%95%98%EB%8F%84%EB%A1%9D-%EB%B6%84%EB%A6%AC\">메서드가 한가지 일을 하도록 분리</a></li>\n<li><a href=\"#%EC%83%81%EC%86%8D%EC%9C%BC%EB%A1%9C-%EC%A4%91%EB%B3%B5%EC%9D%84-%EA%B3%B5%EC%9C%A0%ED%95%98%EB%90%98-%EC%B6%94%EC%83%81%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9A%A9\">상속으로 중복을 공유하되 추상메서드 사용</a></li>\n<li><a href=\"#%EA%B4%80%EC%8B%AC%EC%82%AC%EB%A5%BC-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EB%B6%84%EB%A6%AC\">관심사를 클래스로 분리</a></li>\n<li><a href=\"#%EA%B4%80%EA%B3%84%EC%84%A4%EC%A0%95-%EC%B1%85%EC%9E%84%EC%9D%98-%EB%B6%84%EB%A6%AC\">관계설정 책임의 분리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dao-%EA%B0%9C%EC%84%A0%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EB%8A%94-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5\">Dao 개선으로 보는 객체지향</a></p>\n<ul>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%9D%98%EC%A1%B4%EA%B3%BC-di\">클래스/오브젝트 의존과 DI</a></li>\n<li><a href=\"#%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84-%EC%9B%90%EC%B9%99open-closed-principle\">개방 폐쇄 원칙(Open-Closed Principle)</a></li>\n<li><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4\">전략 패턴</a></li>\n<li><a href=\"#ioc%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84\">IoC(제어의 역전)</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"해당 포스팅은 토비의 스프링 3.1을 읽고 책 내용과 실습 코드 정리 및 스터디에서 나온 의견을 정리한 포스팅이다. 1장 오브젝트와 의존관계 늘 만 생각했기에, 1장 서두의 가 중점인 스프링의 핵심 철학이 인상깊었다.\n그래서 포스팅을 인용으로 시작한다. 자바 엔터프라이즈 기술의 혼란 속에서 잃어버렸던 객체지향 기술의 진정한 가치를 회복시키고, 그로부터 객체지향 프로그래밍이 제공하는 폭넓은 혜택을 누릴 수 있도록 기본으로 돌아가자는 것이 바로 스프링의 핵심 철학이다. 그래서 스프링이 가장 관심을 많이 두는 대상은 오브젝트다. p.53 초난감 DAO 개선기 JDBC API를 처음 배우며 만들었던 모습의  클래스를 만들었다.\n제일 기본적인 기능으로 User 정보를 단건 저장하는 , 단건 조회하는 이 있다. 비록 동작은 잘 하지만 썩 잘 짠 코드 같진 않다.\n어느 부분이 문제일까?\n책에서는 세 가지 관심사가 섞여있는 것이 문제라고 한다. DB 연결 커넥션 가져오기 SQL 문장을 담은 St…","frontmatter":{"date":"September 11, 2022","title":"오브젝트와 의존관계 (토비의 스프링)","categories":"Spring","author":"써머","emoji":"headers/topring-chapter1.png"},"fields":{"slug":"/topring-chapter1/"}},"next":{"id":"ac08bf8d-e5ef-5d99-94e6-aabe22aa7e03","html":"<h1 id=\"문제상황\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9\" aria-label=\"문제상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제상황</h1>\n<h2 id=\"초난감-find\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EB%82%9C%EA%B0%90-find\" aria-label=\"초난감 find permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초난감 find()</h2>\n<p>줍줍은 슬랙 메시지를 날짜이동, 윗방향 스크롤, 아랫방향 스크롤, 단어검색 등 여러 방식으로 볼 수 있다.\n사용자 편의를 위해 여러 복잡한 조회 조건을 주다 보니 백엔드에서 <code class=\"language-text\">Querydsl</code>을 도입했다.</p>\n<h2 id=\"sql과-parameterized-테스트\" style=\"position:relative;\"><a href=\"#sql%EA%B3%BC-parameterized-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"sql과 parameterized 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@sql과 @Parameterized 테스트</h2>\n<p>해당 부분 개발은 다른 팀원들이 맡았다.\n그래서 올라온 PR을 봤는데, 동작은 잘 했으나 테스트가 알아보기 어려웠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Sql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"/truncate.sql\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/message.sql\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageServiceTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">MEMBER_ID</span> <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MessageService</span> messageService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메시지 조회 요청에 따른 메시지가 응답된다\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@MethodSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slackMessageRequest\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ParameterizedTest</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"{0}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">findMessages</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MessageRequest</span> messageRequest<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> expectedMessageIds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> expectedLast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">MessageResponses</span> messageResponses <span class=\"token operator\">=</span> messageService<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MEMBER_ID</span><span class=\"token punctuation\">,</span> messageRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageResponse</span><span class=\"token punctuation\">></span></span> messages <span class=\"token operator\">=</span> messageResponses<span class=\"token punctuation\">.</span><span class=\"token function\">getMessages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> last <span class=\"token operator\">=</span> messageResponses<span class=\"token punctuation\">.</span><span class=\"token function\">isLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token function\">assertAll</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">extracting</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>expectedMessageIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>expectedLast<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">slackMessageRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">\"5번 채널에서 메시지ID가 1인 메시지 이후에 작성된 메시지 7개 조회\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">5L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">createExpectedMessageIds</span><span class=\"token punctuation\">(</span><span class=\"token number\">8L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">\"쿼리 파라미터가 전혀 전달되지 않았을 경우, 회원의 채널 정렬 상 첫번째 채널의 최신 20개 메시지를 작성시간 내림차순으로 응답해야 한다.\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">createExpectedMessageIds</span><span class=\"token punctuation\">(</span><span class=\"token number\">38L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">\"쿼리 파라미터가 전혀 전달되지 않았을 경우, 회원의 채널 정렬 상 첫번째 채널의 최신 20개 메시지를 작성시간 내림차순으로 응답해야 한다.\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">createExpectedMessageIds</span><span class=\"token punctuation\">(</span><span class=\"token number\">38L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">createExpectedMessageIds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> startInclusive<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> endInclusive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">LongStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">rangeClosed</span><span class=\"token punctuation\">(</span>endInclusive<span class=\"token punctuation\">,</span> startInclusive<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverseOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>처음 테스트를 읽었을 때 왜 읽기 어려웠을까?\n먼저 데이터가 <code class=\"language-text\">@Sql</code>문으로 들어가는 게 그랬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> channel <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> slack_id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'임시 채널'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ABC1234'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'공지사항 채널'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DEF5678'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> member <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> slack_id<span class=\"token punctuation\">,</span> thumbnail_url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> first_login<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U03MC231'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://summer.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'써머'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> channel_subscription<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> view_order<span class=\"token punctuation\">,</span> channel_id<span class=\"token punctuation\">,</span> member_id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> message <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> modified_date<span class=\"token punctuation\">,</span> posted_date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> member_id<span class=\"token punctuation\">,</span> channel_id<span class=\"token punctuation\">,</span> slack_message_id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2022-07-12 14:21:55'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2022-07-12 14:21:55'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sample Text'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ABC1231'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2022-07-12 15:21:55'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2022-07-12 15:21:55'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sample Text'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ABC1232'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2022-07-12 16:21:55'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2022-07-12 16:21:55'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sample Text'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ABC1233'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>콘솔의 한글 이름이 없으면 <code class=\"language-text\">MessageRequest</code>가 어떤 요청인지 알기 어렵다.\n<code class=\"language-text\">createExpectedMessageIds()</code>로 만들어진 메시지 id가 어떤 메시지를 나타내는 지 알기 어렵다.\n비즈니스 로직 상 메시지 내용물이 없는 경우가 있다.\n<code class=\"language-text\">sql</code>문의 데이터를 보기 전에는 어떤 기준으로 걸러지는지 알기가 힘들다.</p>\n<h2 id=\"1차-개선\" style=\"position:relative;\"><a href=\"#1%EC%B0%A8-%EA%B0%9C%EC%84%A0\" aria-label=\"1차 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1차 개선</h2>\n<p>개선하며 아래 포커스를 중점으로 했다.</p>\n<ol>\n<li>복잡한 <code class=\"language-text\">MessageRequest</code> 생성 로직을 메서드로 빼 이름을 붙여, 해당 요청이 어떤 요청인지 알 수 있게 한다.</li>\n<li>비교 대상 메시지를 자바 코드 상으로 필터링 해, 어떤 메시지가 필터링 되었는지 보여준다.</li>\n</ol>\n<p>개별 테스트 케이스 마다 다른 데이터를 적재하고 있다.\n원래 테스트의 의도는 같은 데이터가 있을 때, 의도대로 필터링 되는지다.\n필요한 데이터만을 저장하면 엄격하지 않다.\n또, 비용 측면의 문제도 있다.</p>\n<h2 id=\"2차-개선\" style=\"position:relative;\"><a href=\"#2%EC%B0%A8-%EA%B0%9C%EC%84%A0\" aria-label=\"2차 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2차 개선</h2>\n<p><code class=\"language-text\">@Nested</code>를 사용해 피드백 받은 내용을 개선했다.</p>\n<ol>\n<li>모든 테스트 케이스가 같은 데이터를 공유한다.</li>\n<li>최초 한 번만 데이터를 적재해 비용을 절감한다.</li>\n</ol>\n<p>아직 걸리는 점도 있다.</p>\n<h4 id=\"1-테스트-라이프-사이클을-바꾸면서-테스트-간-격리를-포기했다\" style=\"position:relative;\"><a href=\"#1-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%9D%BC%EC%9D%B4%ED%94%84-%EC%82%AC%EC%9D%B4%ED%81%B4%EC%9D%84-%EB%B0%94%EA%BE%B8%EB%A9%B4%EC%84%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B0%84-%EA%B2%A9%EB%A6%AC%EB%A5%BC-%ED%8F%AC%EA%B8%B0%ED%96%88%EB%8B%A4\" aria-label=\"1 테스트 라이프 사이클을 바꾸면서 테스트 간 격리를 포기했다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 테스트 라이프 사이클을 바꾸면서, 테스트 간 격리를 포기했다.</h4>\n<p><code class=\"language-text\">JUnit</code>의 기본 테스트 클래스 라이프 사이클은 <code class=\"language-text\">PER_METHOD</code>이다.\n개별 <code class=\"language-text\">@Test</code> 메서드 마다 새 클래스가 생성되는 전략이다.\n이를 <code class=\"language-text\">PER_CLASS</code>로 바꿔, <code class=\"language-text\">@Nested</code> 내부의 메소드들이 한 클래스 데이터를 공유한다.\n만약 하나의 테스트라도 이 공유 데이터를 수정한다면, 후에 실행되는 모든 테스트가 실패할 것이다.\n<code class=\"language-text\">@Nested</code>안에서 조회만 검증한다는 조건으로 저장에 걸리는 자원을 절약했다.\n팀 컨벤션으로 사용하는 레포지토리 메서드만 선언하기로 했고, <code class=\"language-text\">saveAll()</code>을 선언하지 않았기에, 절약의 의미가 더 컸다.</p>\n<h4 id=\"2-사용하지-않는-구독-변수를-할당했다\" style=\"position:relative;\"><a href=\"#2-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B5%AC%EB%8F%85-%EB%B3%80%EC%88%98%EB%A5%BC-%ED%95%A0%EB%8B%B9%ED%96%88%EB%8B%A4\" aria-label=\"2 사용하지 않는 구독 변수를 할당했다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 사용하지 않는 구독 변수를 할당했다.</h4>\n<p><code class=\"language-text\">@BeforeAll</code>을 쓰는 대신에, 인스턴스 변수를 할당하며 필요 정보를 저장했다.\n구독을 저장하기 위해 사용하지 않는 변수를 할당했다.\n원래는 <code class=\"language-text\">subscription.getChannel().getId()</code>하는 식으로 할당된 변수를 사용하려고 했다.\n그런데 <code class=\"language-text\">JPA</code>의 지연 로딩을 사용하고 있었기에, 테스트 메서드 내로 들어와서 <code class=\"language-text\">getChannel()</code>을 호출할 수가 없었다.</p>","frontmatter":{"date":"August 27, 2022","title":"테스트 개선기","categories":"Spring 트러블슈팅","author":"써머","emoji":"headers/collection-beans.png"},"fields":{"slug":"/journey-to-cool-test/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://hyewoncc.github.io","comments":{"utterances":{"repo":"hyewoncc/hyewoncc.github.io"}}}}},"pageContext":{"slug":"/topring-chapter1/","nextSlug":"/journey-to-cool-test/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437","3350743975"]}